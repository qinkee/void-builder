name: stable-windows

on:
  workflow_dispatch:
    inputs:
      force_version:
        type: boolean
        description: Force update version
      generate_assets:
        type: boolean
        description: Generate assets
      checkout_pr:
        type: string
        description: Checkout PR
      void_commit: # Void added this
        type: string
        description: Checkout specific Void commit
      void_release: # Void added this
        type: string
        description: Custom release number
  repository_dispatch:
    types: [stable]
  push:
    branches: [ master ]
    paths-ignore:
    - '**/*.md'
    - 'upstream/*.json'
  pull_request:
    branches: [ master ]
    paths-ignore:
    - '**/*.md'

env:
  APP_NAME: Void
  ASSETS_REPOSITORY: ${{ github.repository_owner }}/binaries
  BINARY_NAME: void
  GH_REPO_PATH: ${{ github.repository_owner }}/binaries
  ORG_NAME: ${{ github.repository_owner }}
  OS_NAME: windows
  VERSIONS_REPOSITORY: ${{ github.repository_owner }}/versions
  VSCODE_QUALITY: stable
  INCLUDE_ROO_CODE: 'yes'  # Enable Roo-Code integration

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      MS_COMMIT: ${{ env.MS_COMMIT }}
      MS_TAG: ${{ env.MS_TAG }}
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ env.SHOULD_BUILD }}
      SHOULD_DEPLOY: ${{ env.SHOULD_DEPLOY }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}

      - name: Switch to relevant branch
        env:
          PULL_REQUEST_ID: ${{ github.event.inputs.checkout_pr }}
        run: ./get_pr.sh

      - name: Clone VSCode repo
        env: # Void added this
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }} # added this
          VOID_COMMIT: ${{ github.event.inputs.void_commit }} # Void added this
          VOID_RELEASE: ${{ github.event.inputs.void_release }} # Void added this
        run: ./get_repo.sh

      - name: Check PR or cron
        env:
          GENERATE_ASSETS: ${{ github.event.inputs.generate_assets }}
        run: ./check_cron_or_pr.sh

      - name: Check existing VSCodium tags/releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CHECK_ALL: 'yes'
        run: ./check_tags.sh

  compile:
    needs:
      - check
    runs-on: ubuntu-22.04
    env:
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ (needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true') && 'yes' || 'no' }}
      VSCODE_ARCH: 'x64'
    outputs:
      BUILD_SOURCEVERSION: ${{ env.BUILD_SOURCEVERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.SHOULD_BUILD == 'yes'

      - name: Switch to relevant branch
        env:
          PULL_REQUEST_ID: ${{ github.event.inputs.checkout_pr }}
        run: ./get_pr.sh

      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 10
          platform: x64

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        if: env.SHOULD_BUILD == 'yes'

      - name: Install libkrb5-dev
        run: sudo apt-get update -y && sudo apt-get install -y libkrb5-dev
        if: env.SHOULD_BUILD == 'yes'

      - name: Clone VSCode repo
        env: # Void added this
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }} # added this
          VOID_COMMIT: ${{ github.event.inputs.void_commit }} # Void added this
          VOID_RELEASE: ${{ github.event.inputs.void_release }} # Void added this
        run: ./get_repo.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
        if: env.SHOULD_BUILD == 'yes' && env.INCLUDE_ROO_CODE == 'yes'

      - name: Get Roo-Code
        env:
          ROO_CODE_TOKEN: ${{ secrets.ROO_CODE_TOKEN }}
          ROO_CODE_REPO: ${{ secrets.ROO_CODE_REPO }}
          ROO_CODE_VERSION: ${{ vars.ROO_CODE_VERSION || 'v3.25.11' }}
        run: |
          if ($IsWindows) {
            .\get_roo_code.ps1 -ROO_CODE_VERSION $env:ROO_CODE_VERSION -ROO_CODE_REPO $env:ROO_CODE_REPO -ROO_CODE_TOKEN $env:ROO_CODE_TOKEN
          } else {
            ./get_roo_code.sh
          }
        shell: pwsh
        if: env.SHOULD_BUILD == 'yes' && env.INCLUDE_ROO_CODE == 'yes'

      - name: Build
        env:
          SHOULD_BUILD_REH: 'no'
          SHOULD_BUILD_REH_WEB: 'no'
        run: ./build.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Compress vscode artifact
        run: |
          find vscode -type f -not -path "*/node_modules/*" -not -path "vscode/.build/node/*" -not -path "vscode/.git/*" > vscode.txt
          echo "vscode/.build/extensions/node_modules" >> vscode.txt
          echo "vscode/.git" >> vscode.txt
          tar -czf vscode.tar.gz -T vscode.txt
        if: env.SHOULD_BUILD == 'yes'

      - name: Upload vscode artifact
        uses: actions/upload-artifact@v4
        with:
          name: vscode
          path: ./vscode.tar.gz
          retention-days: ${{ needs.check.outputs.SHOULD_DEPLOY == 'yes' && 30 || 1 }}
        if: env.SHOULD_BUILD == 'yes'

  build:
    needs:
      - check
      - compile
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        vscode_arch:
          - x64
          - arm64
    defaults:
      run:
        shell: bash
    env:
      BUILD_SOURCEVERSION: ${{ needs.compile.outputs.BUILD_SOURCEVERSION }}
      MS_COMMIT: ${{ needs.check.outputs.MS_COMMIT }}
      MS_TAG: ${{ needs.check.outputs.MS_TAG }}
      RELEASE_VERSION: ${{ needs.check.outputs.RELEASE_VERSION }}
      SHOULD_BUILD: ${{ (needs.check.outputs.SHOULD_BUILD == 'yes' || github.event.inputs.generate_assets == 'true') && 'yes' || 'no' }}
      SHOULD_DEPLOY: ${{ needs.check.outputs.SHOULD_DEPLOY }}
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
    outputs:
      RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
      SHOULD_DEPLOY: ${{ env.SHOULD_DEPLOY }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.GITHUB_BRANCH }}
        if: env.SHOULD_BUILD == 'yes'

      - name: Switch to relevant branch
        env:
          PULL_REQUEST_ID: ${{ github.event.inputs.checkout_pr }}
        run: ./get_pr.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
        if: env.SHOULD_BUILD == 'yes'

      - name: Setup Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
        if: env.SHOULD_BUILD == 'yes'

      - name: Check existing VSCodium tags/releases
        env:
          DISABLE_MSI: ${{ vars.DISABLE_STABLE_MSI }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./check_tags.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Download vscode artifact
        uses: actions/download-artifact@v4
        with:
          name: vscode
        if: env.SHOULD_BUILD == 'yes'

      - name: Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_arch: ${{ matrix.vscode_arch }}
          npm_config_target_arch: ${{ matrix.vscode_arch }}
        run: ./build/windows/package.sh
        if: env.SHOULD_BUILD == 'yes'

      - name: Prepare assets
        run: ./prepare_assets.sh
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Create self-signed certificate for testing
        run: |
          # 创建自签名证书用于测试
          echo "Creating self-signed certificate for testing..."
          
          # 生成私钥
          openssl genrsa -out code-signing.key 2048
          
          # 创建证书请求配置
          cat > cert.conf << EOF
          [req]
          distinguished_name = req_distinguished_name
          x509_extensions = v3_req
          prompt = no

          [req_distinguished_name]
          C = US
          ST = TestState
          L = TestCity
          O = ${{ secrets.CERT_ORGANIZATION || 'Void Test Org' }}
          OU = Development
          CN = ${{ secrets.CERT_COMMON_NAME || 'Void Test Certificate' }}

          [v3_req]
          keyUsage = critical, digitalSignature
          extendedKeyUsage = codeSigning
          basicConstraints = CA:false
          EOF
          
          # 生成自签名证书
          openssl req -new -x509 -key code-signing.key -out code-signing.crt -days 365 -config cert.conf
          
          # 转换为 PFX 格式（Windows 需要）
          openssl pkcs12 -export -out code-signing.pfx -inkey code-signing.key -in code-signing.crt -passout pass:${{ secrets.CERT_PASSWORD || 'testpassword' }}
          
          echo "Self-signed certificate created successfully"
        shell: bash
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Code Signing with Self-Signed Certificate (Test Environment)
        run: |
          Write-Host "Signing files with self-signed certificate..."
          
          $certPassword = "${{ secrets.CERT_PASSWORD || 'testpassword' }}"
          
          Write-Host "Importing certificate..."
          certutil -f -p "$certPassword" -importpfx code-signing.pfx
          
          Write-Host "Getting certificate thumbprint..."
          
          try {
            $securePassword = ConvertTo-SecureString "$certPassword" -AsPlainText -Force
            $cert = Import-PfxCertificate -FilePath "code-signing.pfx" -CertStoreLocation "Cert:\CurrentUser\My" -Password $securePassword -Exportable
            $thumbprint = $cert.Thumbprint
            Write-Host "Certificate imported successfully. Thumbprint: $thumbprint"
          } catch {
            Write-Host "Import-PfxCertificate failed, trying alternative method..."
            
            $certs = Get-ChildItem -Path "Cert:\CurrentUser\My" | Where-Object { $_.Subject -like "*${{ secrets.CERT_COMMON_NAME || 'Void Test Certificate' }}*" }
            if ($certs.Count -gt 0) {
              $thumbprint = $certs[0].Thumbprint
              Write-Host "Found certificate in store. Thumbprint: $thumbprint"
            } else {
              Write-Error "Could not find certificate in store"
              exit 1
            }
          }
          
          if ([string]::IsNullOrEmpty($thumbprint)) {
            Write-Error "Failed to get certificate thumbprint"
            exit 1
          }
          
          Write-Host "Using certificate thumbprint: $thumbprint"
          
          $signedCount = 0
          $failedCount = 0
          
          $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe"
          if (-not (Test-Path $signtoolPath)) {
            $signtoolPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\signtool.exe" | Select-Object -First 1 -ExpandProperty FullName
            if (-not $signtoolPath) {
              Write-Error "Could not find signtool.exe"
              exit 1
            }
          }
          
          Get-ChildItem -Path "assets" -Include @("*.exe", "*.msi") -Recurse | ForEach-Object {
            Write-Host "Signing: $($_.FullName)"
            
            & $signtoolPath sign /sha1 $thumbprint /fd SHA256 /t "http://timestamp.comodoca.com/authenticode" /d "${{ secrets.CERT_DESCRIPTION || 'Void Editor (Test Build)' }}" /du "${{ secrets.CERT_URL || 'https://github.com/voideditor/void' }}" $_.FullName
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Successfully signed: $($_.Name)"
              $signedCount++
            } else {
              Write-Warning "Failed to sign: $($_.Name) (Exit code: $LASTEXITCODE)"
              $failedCount++
            }
          }
          
          Write-Host "Signing completed. Success: $signedCount, Failed: $failedCount"
          
          if ($failedCount -gt 0) {
            Write-Warning "Some files failed to sign, but continuing..."
          }
        shell: powershell
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Verify signatures
        run: |
          Write-Host "Verifying signatures..."
          Get-ChildItem -Path "assets" -Include @("*.exe", "*.msi") -Recurse | ForEach-Object {
            Write-Host "Verifying: $($_.Name)"
            $sig = Get-AuthenticodeSignature $_.FullName
            if ($sig.Status -eq "Valid") {
              Write-Host "VALID: $($_.Name) - Signature valid"
              Write-Host "  Subject: $($sig.SignerCertificate.Subject)"
              Write-Host "  Issuer: $($sig.SignerCertificate.Issuer)"
            } else {
              Write-Warning "INVALID: $($_.Name) - Signature status: $($sig.Status)"
            }
          }
        shell: powershell
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Clean up certificate files
        run: |
          # 清理敏感文件
          if (Test-Path "code-signing.key") { Remove-Item "code-signing.key" -Force }
          if (Test-Path "code-signing.pfx") { Remove-Item "code-signing.pfx" -Force }
          if (Test-Path "code-signing.crt") { Remove-Item "code-signing.crt" -Force }
          if (Test-Path "cert.conf") { Remove-Item "cert.conf" -Force }
          echo "Certificate files cleaned up"
        shell: powershell
        if: always() && env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Prepare checksums
        run: ./prepare_checksums.sh
        if: env.SHOULD_BUILD == 'yes' && (env.SHOULD_DEPLOY == 'yes' || github.event.inputs.generate_assets == 'true')

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }} # Void bumped this to stronger
        run: ./release.sh
        if: env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Update versions repo
        env:
          FORCE_UPDATE: ${{ github.event.inputs.force_version }}
          GITHUB_TOKEN: ${{ secrets.STRONGER_GITHUB_TOKEN }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
        run: ./update_version.sh
        if: env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'yes'

      - name: Upload assets
        uses: actions/upload-artifact@v4
        with:
          name: bin-${{ matrix.vscode_arch }}
          path: assets/
          retention-days: 3
        if: env.SHOULD_BUILD == 'yes' && env.SHOULD_DEPLOY == 'no' && github.event.inputs.generate_assets == 'true'

  # Void commented this - we should re-add it eventually
  # winget:
  #   needs: build
  #   runs-on: windows-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   env:
  #     APP_IDENTIFIER: VSCodium.VSCodium
  #   if: needs.build.outputs.SHOULD_DEPLOY == 'yes'

    # steps:
    #   - uses: actions/checkout@v4
    #     with:
    #       ref: ${{ env.GITHUB_BRANCH }}

      # - name: Check version
      #   run: ./stores/winget/check_version.sh
      #   env:
      #     RELEASE_VERSION: ${{ needs.build.outputs.RELEASE_VERSION }}

      # - name: Release to WinGet
      #   uses: vedantmgoyal9/winget-releaser@main
      #   with:
      #     identifier: ${{ env.APP_IDENTIFIER }}
      #     version: ${{ env.RELEASE_VERSION }}
      #     release-tag: ${{ env.RELEASE_VERSION }}
      #     installers-regex: '\.exe$' # only .exe files
      #     token: ${{ secrets.STRONGER_GITHUB_TOKEN }}
      #   if: env.SHOULD_DEPLOY == 'yes'
